name: CD - Release Build

on:
  push:
    branches: [ main ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      current-version: ${{ steps.version-check.outputs.version }}
      new-version: ${{ steps.version-bump.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check if version changed in PR
      id: version-check
      run: |
        # Check if .version changed in the last commit
        if git diff HEAD~1 HEAD --name-only | grep -q ".version"; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$(cat .version)" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "version=$(cat .version)" >> $GITHUB_OUTPUT
        fi
        
    - name: Auto-bump patch version
      id: version-bump
      if: steps.version-check.outputs.changed == 'false'
      run: |
        current_version=$(cat .version)
        echo "Current version: $current_version"
        
        # Extract major, minor, patch
        IFS='.' read -r major minor patch <<< "$current_version"
        
        # Increment patch version
        new_patch=$((patch + 1))
        new_version="$major.$minor.$new_patch"
        
        echo "New version: $new_version"
        echo "$new_version" > .version
        echo "version=$new_version" >> $GITHUB_OUTPUT
        
        # Commit the version change
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .version
        git commit -m "Auto-bump patch version to $new_version"
        git push

  build-and-release:
    needs: check-version
    runs-on: windows-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Pull latest changes
      run: git pull origin main
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install build tools
      run: |
        pip install pyinstaller
        # Download and install Inno Setup
        $innoUrl = "https://files.jrsoftware.org/is/6/innosetup-6.4.3.exe"
        Invoke-WebRequest -Uri $innoUrl -OutFile "innosetup.exe"
        Start-Process -FilePath "innosetup.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        
    - name: Run unit tests
      run: |
        python scripts/run_tests.py
        
    - name: Build application
      run: |
        ./build_all.bat
        
    - name: Get version
      id: get-version
      run: |
        $version = Get-Content .version
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
    - name: Create release branch
      run: |
        $version = "${{ steps.get-version.outputs.version }}"
        $releaseBranch = "release/v$version"
        
        git checkout -b $releaseBranch
        git push origin $releaseBranch
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        release_name: Portal Receipts App v${{ steps.get-version.outputs.version }}
        body: |
          ## What's Changed
          
          ### Features
          - Portal integration for receipt generation
          - Two-factor authentication support
          - CSV export functionality
          - Professional Windows installer
          
          ### Technical Details
          - Built with Python 3.9
          - Windows installer created with Inno Setup
          - Comprehensive unit test coverage
          
          ### Installation
          Download and run `PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe`
          
          ### Files
          - **PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe**: Windows installer
          - **PortalReceiptsApp_v${{ steps.get-version.outputs.version }}_Release.zip**: Complete release package
          
          ---
          
          For more details, see the [documentation](https://github.com/luciaBytes/receipts/tree/main/docs).
        draft: false
        prerelease: false
        
    - name: Upload installer to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe
        asset_name: PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe
        asset_content_type: application/octet-stream
        
    - name: Upload release package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/PortalReceiptsApp_v${{ steps.get-version.outputs.version }}_Release.zip
        asset_name: PortalReceiptsApp_v${{ steps.get-version.outputs.version }}_Release.zip
        asset_content_type: application/zip
