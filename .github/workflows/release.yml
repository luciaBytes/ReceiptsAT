name: CD - Release Build

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      current-version: ${{ steps.version-check.outputs.version }}
      new-version: ${{ steps.version-bump.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check if version changed in PR
      id: version-check
      run: |
        # Check if .version changed in the last commit
        if git diff HEAD~1 HEAD --name-only | grep -q ".version"; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$(cat .version)" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "version=$(cat .version)" >> $GITHUB_OUTPUT
        fi
        
    - name: Auto-bump patch version
      id: version-bump
      if: steps.version-check.outputs.changed == 'false'
      run: |
        current_version=$(cat .version)
        echo "Current version: $current_version"
        
        # Extract major, minor, patch
        IFS='.' read -r major minor patch <<< "$current_version"
        
        # Increment patch version
        new_patch=$((patch + 1))
        new_version="$major.$minor.$new_patch"
        
        echo "New version: $new_version"
        echo "$new_version" > .version
        echo "version=$new_version" >> $GITHUB_OUTPUT
        
        # Commit the version change
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .version
        git commit -m "Auto-bump patch version to $new_version [skip ci]"
        git push origin main

  build-and-release:
    needs: check-version
    runs-on: windows-latest
    timeout-minutes: 30
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Pull latest changes
      run: git pull origin main
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install build tools
      run: |
        echo "Installing PyInstaller..."
        pip install pyinstaller
        echo "PyInstaller installed successfully!"
        
    - name: Install Inno Setup
      run: |
        echo "Installing Inno Setup via Chocolatey..."
        choco install innosetup -y
        echo "Inno Setup installed successfully!"
        
          - name: Verification
      run: |
        echo "=== Verifying installations ==="
        
        # Test PyInstaller
        python -c "import PyInstaller; print(f'PyInstaller version: {PyInstaller.__version__}')"
        if ($LASTEXITCODE -ne 0) {
            Write-Error "PyInstaller verification failed!"
            exit 1
        }
        
        # Check if iscc is available
        $isccPath = (Get-Command iscc -ErrorAction SilentlyContinue)
        if ($isccPath) {
            Write-Output "Inno Setup compiler found at: $($isccPath.Source)"
            Write-Output "Inno Setup is working correctly"
        } else {
            Write-Error "Inno Setup compiler not found!"
            exit 1
        }
        
        Write-Output "=== All installations verified successfully ==="
        exit 0
        
    - name: Run unit tests
      run: |
        echo "=== Running unit tests ==="
        python scripts/run_tests.py
        echo "=== Unit tests completed ==="
        
    - name: Check build dependencies
      run: |
        echo "=== Checking build environment ==="
        echo "Current directory: $PWD"
        echo "Python version:"
        python --version
        echo "PyInstaller version:"
        python -c "import PyInstaller; print(PyInstaller.__version__)"
        echo "Available batch files:"
        Get-ChildItem -Name "*.bat"
        echo "Build directory contents:"
        Get-ChildItem -Path "build" -Name
        
    - name: Build application
      run: |
        echo "=== Starting build process ==="
        echo "Current directory: %CD%"
        echo "Checking if build_all.bat exists..."
        dir build_all.bat
        echo "=== Executing build_all.bat ==="
        .\build_all.bat
        echo "=== Build process completed ==="
      shell: cmd
        
    - name: Get version
      id: get-version
      run: |
        $version = Get-Content .version
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
    - name: Create release branch
      run: |
        $version = "${{ steps.get-version.outputs.version }}"
        $releaseBranch = "release/v$version"
        
        git checkout -b $releaseBranch
        git push origin $releaseBranch
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        release_name: Portal Receipts App v${{ steps.get-version.outputs.version }}
        body: |
          ## What's Changed
          
          ### Features
          - Portal integration for receipt generation
          - Two-factor authentication support
          - CSV export functionality
          - Professional Windows installer
          
          ### Technical Details
          - Built with Python 3.9
          - Windows installer created with Inno Setup
          - Comprehensive unit test coverage
          
          ### Installation
          Download and run `PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe`
          
          ### Files
          - **PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe**: Windows installer
          - **PortalReceiptsApp_v${{ steps.get-version.outputs.version }}_Release.zip**: Complete release package
          
          ---
          
          For more details, see the [documentation](https://github.com/luciaBytes/receipts/tree/main/docs).
        draft: false
        prerelease: false
        
    - name: Upload installer to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe
        asset_name: PortalReceiptsApp_Setup_v${{ steps.get-version.outputs.version }}.exe
        asset_content_type: application/octet-stream
        
    - name: Upload release package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/PortalReceiptsApp_v${{ steps.get-version.outputs.version }}_Release.zip
        asset_name: PortalReceiptsApp_v${{ steps.get-version.outputs.version }}_Release.zip
        asset_content_type: application/zip
